## home path
if [ -d "${HOME}/.bin" ]; then
    add_path "${HOME}/.bin"
fi

if [ -d "${HOME}/local/bin" ]; then
    add_path "${HOME}/local/bin"
fi

## emacs
if [ -d "${HOME}/.cask/bin" ]; then
    add_path "${HOME}/.cask/bin"
fi

## editor
if type emacs >/dev/null 2>&1; then
    export EDITOR='emacs -nw'
fi
alias e=$EDITOR

## date
alias now='date +"%Y%m%d%H%M%S"'
alias ymd='date +"%Y%m%d"'

## screen
function sc {
    name="${1:-main}"
    screen -x "$name" >/dev/null 2>&1 || screen -S "$name"
}

## git
if type git >/dev/null 2>&1; then
    alias gb='git --no-pager br'
    alias gst='git --no-pager st && git --no-pager stash list'

    function gstf {
        git --no-pager status --short | awk "{print\$1=\"\";print}" | grep -v '^$' | awk "NR==${1:-1}"
    }

    function gsta {
        git add ${@:2} `gstf ${1}`
    }

    function gstc {
        git checkout ${@:2} `gstf ${1}`
    }

    function gstd {
        git d -- `gstf ${1}`
    }

    function gste {
        $EDITOR ${@:2} `gstf ${1}`
    }

    function git_user_config {
        git config user.name "${1}"
        git config user.email "${2}"
    }
fi

## ruby
if [ -d "${HOME}/.rbenv/bin" ]; then
    add_path "${HOME}/.rbenv/bin"
    require_script "${HOME}/.rbenv/completions/rbenv.bash"
fi

if type rbenv >/dev/null 2>&1; then
    eval "$(rbenv init -)"

    function rbenv_rehash {
        rbenv rehash
    }

    function rbenv_install {
        if type brew >/dev/null 2>&1; then
            RUBY_CONFIGURE_OPTS="--with-readline-dir=$(brew --prefix readline) --with-openssl-dir=$(brew --prefix openssl)" rbenv install "${1}"
        else
            rbenv install "${1}"
        fi
        rbenv_version "${1}"
    }

    function rbenv_version {
        if [ -z "${1}" ]; then
            ruby --version
            return
        fi

        local version=$(rbenv versions --bare | grep "^${1}" -m 1)
        if [ -n "${version}" ]; then
            rbenv global $version
            rbenv rehash
        else
            echo "Error: version not found. invalid version = ${1}"
            return 1
        fi
    }
else
    function rbenv_rehash {
        local x
    }
fi

if type bundle >/dev/null 2>&1; then
    alias be='bundle exec'

    function bundle_install {
        bundle install --path vendor/bundle --without production && rbenv_rehash
    }
fi

## python
if [ -d "${HOME}/.pyenv" ]; then
    export PYENV_ROOT="${HOME}/.pyenv"
    add_path "${PYENV_ROOT}/bin"
fi

if type pyenv >/dev/null 2>&1; then
    eval "$(pyenv init -)"

    if [ -d "$(pyenv root)/plugins/pyenv-virtualenv" ]; then
        eval "$(pyenv virtualenv-init -)"
    fi
fi

## node
if [ -d "${HOME}/.nodebrew" ]; then
    add_path "${HOME}/.nodebrew/current/bin"
    require_script "${HOME}/.nodebrew/completions/bash/nodebrew-completion"
fi

## go
if [ -d "${HOME}/go" ]; then
    export GOROOT="${HOME}/go"
    export GOPATH="${HOME}/devgo"
    add_path "${GOROOT}/bin" "${GOPATH}/bin"
fi

## ffmpeg
if type ffmpeg >/dev/null 2>&1; then
    function ffmpeg_tomp4 {
        ffmpeg -i $1 -pix_fmt yuv420p ${1%.*}.mp4
    }
    function ffmpeg_togif {
        tmppalettefile='tmp-palette.png'
        ffmpeg -i $1 -vf "palettegen" -y $tmppalettefile
        ffmpeg -i $1 -i $tmppalettefile -lavfi "fps=12,scale=900:-1:flags=lanczos [x]; [x][1:v] paletteuse=dither=bayer:bayer_scale=5:diff_mode=rectangle" -y ${1%.*}.gif
        rm -f $tmppalettefile
    }
fi
