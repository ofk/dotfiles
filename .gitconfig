[include]
    path = ~/.gitconfig.local

[core]
    excludesfile = ~/.gitexcludes
    editor = emacs -nw

[color]
    ui = auto

[push]
    default = current

[alias]
    br = branch
    co = checkout
    cm = commit --message
    st = status --short --branch
    cp = cherry-pick

    lg = log --stat --abbrev-commit --decorate=short --pretty=format:'%C(yellow)%h %C(green)%cr %C(blue)%cn%C(red)%d %C(reset)%s %C(cyan)%b'
    lp = log --patch --find-renames --ignore-space-change --abbrev-commit --decorate=short --pretty=format:'%C(yellow)%h %C(green)%cr %C(blue)%cn%C(red)%d %C(reset)%s %C(cyan)%b'
    lv = log --graph --abbrev-commit --date=short --decorate=short --pretty=format:'%C(yellow)%h %C(green)%cd %C(blue)%cn%C(red)%d %C(reset)%s'
    d = diff --indent-heuristic --ignore-space-change --histogram

    sync = !git fetch -p && git pull $(git remote show | grep -e origin -e upstream | tail -n1) $(git rev-parse --abbrev-ref @) && git branch -d $(git branch --merged | grep -v '*' | grep -v master | grep -v develop) && git pull $(git remote show | grep -e origin -e upstream | tail -n1) --tags
    backup = "!f(){ local br=$(git rev-parse --abbrev-ref HEAD); git switch -c \"$br-bak\" && git switch -; };f"
    recommit = "!f(){ git cherry-pick $1; local mes=$(git log -1 --pretty=format:\"%B\"); local fs=$(git diff --name-only HEAD~); git reset HEAD~ && git add $fs && git commit -m \"$mes\"; };f"
    cancel = !git commit -a -m 'Temporary commit for cancel' && git reset --hard HEAD~
    release = "!f(){ git commit -m \"Release $1\" && git tag -a $1 -m \"Release $1\";};f"
    init-commit = !git commit --allow-empty -m \"\\`mkdir $(basename $(pwd))\\`\"

[merge]
	ff = false

[pull]
	ff = only

[filter "lfs"]
	clean = git-lfs clean -- %f
	smudge = git-lfs smudge -- %f
	process = git-lfs filter-process
	required = true
[init]
	defaultBranch = main
